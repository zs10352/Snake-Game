<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        /* Global reset and body styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            text-align: center;
            flex-direction: column;
        }

        h1 {
            font-size: 2em;
            margin-bottom: 20px;
            color: #4CAF50;
        }

        /* Style for the canvas */
        canvas {
            border: 5px solid #4CAF50;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        /* Style for the Game Over message */
        .game-over {
            display: none;
            margin-top: 20px;
            font-size: 1.5em;
            color: #ff0000;
        }

        .game-over.active {
            display: block;
        }
    </style>
</head>
<body>

    <h1>Snake Game</h1>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <div id="gameOverMessage" class="game-over">Game Over! Press F5 to restart.</div>

    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        const gridSize = 20; // Size of the grid (each block of the snake)
        const canvasSize = 400; // Canvas size

        let snake = [{x: 160, y: 160}]; // Snake's initial position
        let food = {x: 100, y: 100}; // Food's initial position
        let dx = gridSize; // Horizontal movement (initially moving right)
        let dy = 0; // Vertical movement (not moving up or down initially)

        let gameRunning = true;
        const gameOverMessage = document.getElementById("gameOverMessage");

        // Key press handler to change the snake's direction
        document.addEventListener("keydown", (e) => {
            if (e.key === "ArrowUp" && dy === 0) {
                dx = 0;
                dy = -gridSize;
            } else if (e.key === "ArrowDown" && dy === 0) {
                dx = 0;
                dy = gridSize;
            } else if (e.key === "ArrowLeft" && dx === 0) {
                dx = -gridSize;
                dy = 0;
            } else if (e.key === "ArrowRight" && dx === 0) {
                dx = gridSize;
                dy = 0;
            }
        });

        // Draw the snake on the canvas
        function drawSnake() {
            snake.forEach((segment) => {
                ctx.fillStyle = "green";
                ctx.fillRect(segment.x, segment.y, gridSize, gridSize);
            });
        }

        // Draw the food on the canvas
        function drawFood() {
            ctx.fillStyle = "red";
            ctx.fillRect(food.x, food.y, gridSize, gridSize);
        }

        // Move the snake's position
        function moveSnake() {
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};

            snake.unshift(head); // Add the new head to the snake

            // Check if the snake eats food
            if (head.x === food.x && head.y === food.y) {
                generateFood(); // Generate new food position
            } else {
                snake.pop(); // Remove the last segment if food isn't eaten
            }
        }

        // Generate a new food position
        function generateFood() {
            const foodX = Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize;
            const foodY = Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize;
            food = {x: foodX, y: foodY};
        }

        // Check if the snake collides with itself or walls
        function checkCollisions() {
            const head = snake[0];

            // Check wall collision
            if (head.x < 0 || head.x >= canvasSize || head.y < 0 || head.y >= canvasSize) {
                gameRunning = false;
            }

            // Check self-collision
            for (let i = 1; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameRunning = false;
                }
            }
        }

        // Main game loop
        function gameLoop() {
            if (!gameRunning) {
                gameOverMessage.classList.add("active");
                return;
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas

            moveSnake();
            checkCollisions();

            drawSnake();
            drawFood();

            setTimeout(gameLoop, 100); // Set the game speed (100ms per frame)
        }

        // Start the game loop
        gameLoop();
    </script>

</body>
</html>
